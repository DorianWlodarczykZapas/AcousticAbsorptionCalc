from calculations.models import Norm, NormCalculationType, NormRequirement
from django.core.management.base import BaseCommand


class Command(BaseCommand):
    help = "Load default acoustic norms and requirements into the database."

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS("Loading norms into database..."))

        norms_data = [
            {
                "name": "School Classrooms and Lecture Halls",
                "description": (
                    "Classrooms and lecture halls in primary, secondary, and higher education. "
                    "Good speech intelligibility is required both for direct and amplified communication."
                ),
                "application_type": NormCalculationType.VOLUME,
                "requirements": [
                    {
                        "volume_min": 120.0,
                        "volume_max": 250.0,
                        "rt_max": 0.6,
                        "sti_min": 0.6,
                    },
                    {
                        "volume_min": 250.0,
                        "volume_max": 500.0,
                        "rt_max": 0.8,
                        "sti_min": 0.6,
                    },
                    {
                        "volume_min": 500.0,
                        "volume_max": 2000.0,
                        "rt_max": 1.0,
                        "sti_min": 0.6,
                    },
                ],
            },
            {
                "name": "Nursery and Kindergarten Rooms",
                "description": (
                    "Rooms with a typically high noise level generated by children during activities and play. "
                    "Increased sound absorption reduces reverberation time and noise levels."
                ),
                "application_type": NormCalculationType.NONE,
                "requirements": [{"rt_max": 0.4}],
            },
            {
                "name": "School Common Rooms",
                "description": (
                    "Common rooms and school canteens with typically high noise levels. "
                    "Increased sound absorption reduces reverberation and improves speech intelligibility."
                ),
                "application_type": NormCalculationType.NONE,
                "requirements": [{"rt_max": 0.6}],
            },
            {
                "name": "Teachers' Rooms",
                "description": (
                    "Rooms for teachers and staff, providing spaces for rest between classes. "
                    "High sound absorption is required to limit noise and ensure acoustic comfort."
                ),
                "application_type": NormCalculationType.NONE,
                "requirements": [{"rt_max": 0.6}],
            },
            {
                "name": "Technical Labs and School Workshops",
                "description": (
                    "Workshops and labs where noise from tools and machines is high. "
                    "Increased acoustic absorption is required to limit noise levels."
                ),
                "application_type": NormCalculationType.NONE,
                "requirements": [{"absorption_min_factor": 0.6}],
            },
            {
                "name": "School and Kindergarten Changing Rooms",
                "description": (
                    "Changing rooms mainly serving communication functions and student rest areas. "
                    "High noise levels during breaks require increased acoustic absorption to reduce sound propagation."
                ),
                "application_type": NormCalculationType.NONE,
                "requirements": [{"absorption_min_factor": 0.6}],
            },
            {
                "name": "School Sports Halls",
                "description": (
                    "Sports halls in schools. Requirements focus on limiting the reverberation time to improve speech "
                    "and sound clarity during physical activities."
                ),
                "application_type": NormCalculationType.VOLUME,
                "requirements": [
                    {"volume_min": 0.0, "volume_max": 5000.0, "rt_max": 1.5},
                    {"volume_min": 5000.0, "volume_max": 12000.0, "rt_max": 2.0},
                ],
            },
            {
                "name": "School Corridors",
                "description": (
                    "Corridors in schools with high noise levels during breaks and transitions. "
                    "The reverberation time must be limited based on corridor height."
                ),
                "application_type": NormCalculationType.HEIGHT,
                "requirements": [
                    {"height_min": 0.0, "height_max": 3.5, "rt_max": 0.6},
                    {"height_min": 3.5, "height_max": 20.0, "rt_max": 0.8},
                ],
            },
            {
                "name": "School Canteens",
                "description": (
                    "Canteens in schools where noise levels are typically high during meals. "
                    "Limiting the reverberation time improves speech intelligibility and comfort."
                ),
                "application_type": NormCalculationType.NONE,
                "requirements": [{"rt_max": 1.0}],
            },
        ]

        for norm_data in norms_data:
            norm, created = Norm.objects.get_or_create(
                name=norm_data["name"],
                defaults={
                    "description": norm_data["description"],
                    "application_type": norm_data["application_type"],
                },
            )
            if created:
                self.stdout.write(self.style.SUCCESS(f"Created norm: {norm.name}"))
            else:
                self.stdout.write(
                    self.style.WARNING(f"Norm already exists: {norm.name}")
                )

            for req_data in norm_data["requirements"]:
                NormRequirement.objects.get_or_create(
                    norm=norm,
                    volume_min=req_data.get("volume_min"),
                    volume_max=req_data.get("volume_max"),
                    height_min=req_data.get("height_min"),
                    height_max=req_data.get("height_max"),
                    rt_max=req_data.get("rt_max"),
                    sti_min=req_data.get("sti_min"),
                    absorption_min_factor=req_data.get("absorption_min_factor"),
                )

        self.stdout.write(self.style.SUCCESS("Norms loading completed."))
